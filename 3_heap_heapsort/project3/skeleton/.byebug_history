c
prc.call(parent_el, child1_el)
children.length
n
child2_el
children
array
c
child2_el
prc.call(child2_el, child1_el)
prc.call(parent_el, child1_el)
child1_el
parent_el
c
child1_el
parent_el
c
n
child1_el
parent_el
c
parent_idx
children[0]
parent_idx
n
c
parent_idx
children
c
parent_idx
child2_el
child1_el
n
parent_idx
len
array
parent_idx
children
c
array
children
c
children
c
n
c
n
c
prc.call(parent_el, child1_el)
c
child2_el
child1_el
array[parent_idx]
c
array[parent_idx]
c
n
prc.call(parent_el, child1_el)
child1_el
parent_el
c
1 <=> 2
prc.call(1,2)
n
prc.call(1,2)
c
prc.call(1,2)
c
prc.call(1,2)
c
prc.call(1,2)
c
prc.call(1,2)
c
prc.call(1,2)
c
prc.call(1,2)
c
prc.call(1,2)
c
prc.call(1,2)
!!prc
c
!!prc
c
a.call(1,2)
a = Proc.new { |x, y| x <=> y }
prc.call(2,1)
prc.call(1,2)
c
child1_el
parent_el
prc
prc.call(parent_el, child1_el)
c
prc.call(parent_el, child2_el)
prc.call(parent_el, child1_el)
c
prc.call(child_el, parent_el)
n
parent_el
child_el
parent_idx
c
children
parent_idx
children[0]
array
c
prc.call(parent_el, child1_el)
child2_el
child1_el
parent_el
n
c
array[parent_idx]
array[parent_el]
c
berf
exit
self
parent_index
len
leen
